/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui.panels;

import clases.PC;
import clases.Producto;
import conexionBD.DetallesPcDAO;
import conexionBD.PcDAO;
import conexionBD.ProductoDAO;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author henry
 */
public class RegistroPcPanel extends javax.swing.JPanel {

    /**
     * Creates new form RegistroPanelPanel
     */
    ProductoDAO productoDAO = new ProductoDAO();
    PcDAO pcDAO = new PcDAO();
    DetallesPcDAO detallesPcDAO = new DetallesPcDAO();
    DefaultTableModel modelo = new DefaultTableModel();
    
    public RegistroPcPanel() {
        initComponents();
        listarProductos();
    }
    
    
    private void listarProductos() {
        List<PC> lista = pcDAO.listar();
        System.out.println(lista.size());
        modelo = (DefaultTableModel) tablaPc.getModel();
        Object[] ob = new Object[3];
        for (int i = 0; i < lista.size(); i++) {
            ob[0] = lista.get(i).getId();
            ob[1] = lista.get(i).getNombre();
            ob[2] = lista.get(i).getStock();
            
            modelo.addRow(ob);
        }
        
        tablaPc.setModel(modelo);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPc = new javax.swing.JTable();
        txtStock = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaPc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPc);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 620, 303));

        txtStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStockActionPerformed(evt);
            }
        });
        add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 400, 78, 53));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 400, 110, 54));

        btnStock.setText("Cambiar Stock");
        btnStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockActionPerformed(evt);
            }
        });
        add(btnStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 400, 110, 54));
    }// </editor-fold>//GEN-END:initComponents

    private void txtStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStockActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int fila = tablaPc.getSelectedRow();
        int id = Integer.parseInt(tablaPc.getValueAt(fila, 0).toString());
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
        } else {
            pcDAO.eliminar(id);
            detallesPcDAO.eliminarDetallesPc(id);
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed
        // TODO add your handling code here:
        int fila = tablaPc.getSelectedRow();
        
        if(fila == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
        }else{
            System.out.println(tablaPc.getValueAt(fila, 0).toString());
            int id = Integer.parseInt(tablaPc.getValueAt(fila, 0).toString());
            //recoge el valor del stock a aumentar
            final int stockAct = Integer.parseInt(txtStock.getText());
            
            //crea lista para comprobar que todos los elementos existar
            List<Integer> idList = detallesPcDAO.obtenerDetallesPorId(id).stream()
                .map(Producto::getId)
                .collect(Collectors.toList());
            boolean todosLosProductosExisten = idList.stream().allMatch(i->productoDAO.comprobarProducto(i));//comprobacion
            
            if(todosLosProductosExisten){
                //se vaerifica que todos los elementos q componen la pc tengan suficiente stock
                boolean prolst = detallesPcDAO.obtenerDetallesPorId(id).stream().allMatch(det->det.getStock()>=stockAct);
                        
                if(prolst){
                    int stk= pcDAO.obtenerPcPorId(id).getStock();
                    pcDAO.actualizarStock(id, stk+stockAct);
                    
                    List<Producto> idListProd = detallesPcDAO.obtenerDetallesPorId(id);
                    for(Producto i : idListProd){
                        productoDAO.actualizarStock(i.getId(), i.getStock()-stockAct);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "No el stock de alguno de sus elemento no es suficiente");
                }
            }else{
                JOptionPane.showMessageDialog(this, "No existe alguno(s) de los elementos que lo componian");
            }
            
        }
    }//GEN-LAST:event_btnStockActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnStock;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPc;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
